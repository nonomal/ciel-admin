// =================================================================================
// This is auto-generated by FreeKey Admin at 2022-07-22 20:14:53. For more information see https://github.com/1211ciel/ciel-admin
// =================================================================================

package controller

import (
	"ciel-admin/internal/service/dict"
	"ciel-admin/internal/service/sys"
	"ciel-admin/utility/utils/res"
	"ciel-admin/utility/utils/xcaptcha"
	"fmt"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/net/ghttp"
	"github.com/gogf/gf/v2/os/gctx"
	captcha "github.com/mojocn/base64Captcha"
)

type cBase struct {
	Table   string
	ReqPath string
	FileDir string
}

// ---Home----------------------------------------------------------------------
type home struct{}

var Home = &home{}

func (c home) IndexPage(r *ghttp.Request) {
	r.Response.RedirectTo(g.Config().MustGet(r.Context(), "home").String())
}

// ---System-----------------------------------------------------------------

type cSys struct{}

var Sys = &cSys{}

func (s cSys) GetDictByKey(r *ghttp.Request) {
	data, err := dict.GetByKey(r.Context(), r.Get("key").String())
	if err != nil {
		res.Err(err, r)
	}
	res.OkData(data, r)
}
func (s cSys) To(r *ghttp.Request) {
	name := r.Get("path")
	if name.IsEmpty() || name.String() == "null" {
		res.Err(fmt.Errorf("filename prefix cannot be empty"), r)
	}
	node, err := sys.NodeInfo(r.Context(), r.URL.Path)
	if err != nil {
		res.Err(err, r)
	}
	if node.FilePath == "" {
		res.Err(fmt.Errorf("node file path is empty"), r)
	}
	_ = r.Response.WriteTpl(node.FilePath, g.Map{
		"node": node,
		"path": r.URL.Path,
	})
}
func (s cSys) GetCaptcha(r *ghttp.Request) {
	var driver = xcaptcha.NewDriver().ConvertFonts()
	c := captcha.NewCaptcha(driver, xcaptcha.Store)
	_, content, answer := c.Driver.GenerateIdQuestionAnswer()
	id := r.GetQuery("id").String()
	item, _ := c.Driver.DrawCaptcha(content)
	c.Store.Set(id, answer)
	res.OkData(item.EncodeB64string(), r)
}
func (s cSys) Quotations(r *ghttp.Request) {
	node, err := sys.NodeInfo(r.Context(), "/to/quotations")
	if err != nil {
		res.Err(err, r)
	}
	if err = r.Response.WriteTpl("/sys/tool/quotations.html", g.Map{"node": node}); err != nil {
		res.Err(err, r)
	}
}
func (s cSys) DocumentIndex(r *ghttp.Request) {
	res.Tpl("/sys/tool/document.html", nil, r)
}

// --- Ws ------------------------------------------------------------------------
type ws struct{}

var Ws = &ws{}

func (w ws) GetUserWs(r *ghttp.Request) {
	sys.GetUserWs(r)
}
func (w ws) GetAdminWs(r *ghttp.Request) {
	sys.GetAdminWs(r)
}
func (w ws) NoticeUser(r *ghttp.Request) {
	var d struct {
		Uid     int `v:"required"`
		OrderId int `v:"required"`
	}
	err := r.Parse(&d)
	if err != nil {
		res.Err(err, r)
	}
	err = sys.NoticeUser(gctx.New(), d.Uid, d)
	if err != nil {
		res.Err(err, r)
	}
	res.Ok(r)
}
func (w ws) NoticeAdmin(r *ghttp.Request) {
	var d struct {
		Msg string `v:"required" json:"msg"`
	}
	err := r.Parse(&d)
	if err != nil {
		res.Err(err, r)
	}
	err = sys.NoticeAllAdmin(r.Context(), d)
	if err != nil {
		res.Err(err, r)
	}
	res.Ok(r)
}
