// =================================================================================
// This is auto-generated by FreeKey Admin at 2022-07-22 20:14:53. For more information see https://github.com/1211ciel/ciel-admin
// =================================================================================

// Package controller 控制成
package controller

import (
	"ciel-admin/internal/consts"
	"ciel-admin/internal/model/bo"
	"ciel-admin/internal/model/entity"
	"ciel-admin/internal/service/sys"
	"ciel-admin/utility/utils/res"
	"ciel-admin/utility/utils/xparam"
	"ciel-admin/utility/utils/xurl"
	"fmt"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/net/ghttp"
	"github.com/gogf/gf/v2/os/gctx"
	"github.com/gogf/gf/v2/os/gtime"
	"github.com/gogf/gf/v2/util/gconv"
	"strings"
	"time"

	captcha "github.com/mojocn/base64Captcha"
)

type cBase struct {
	Table   string
	ReqPath string
	FileDir string
}

// ---Home----------------------------------------------------------------------
type home struct{}

var Home = &home{}

func (c home) IndexPage(r *ghttp.Request) {
	r.Response.RedirectTo(g.Config().MustGet(r.Context(), "home").String())
}

// ---System-----------------------------------------------------------------

type cSys struct{}

var Sys = &cSys{}

func (s cSys) Level1(r *ghttp.Request) {
	level1, err := sys.MenusLevel1(r.Context())
	if err != nil {
		res.Err(err, r)
	}
	res.OkData(level1, r)
}
func (s cSys) GetDictByKey(r *ghttp.Request) {
	data, err := sys.DictGetByKey(r.Context(), r.Get("key").String())
	if err != nil {
		res.Err(err, r)
	}
	res.OkData(data, r)
}
func (s cSys) To(r *ghttp.Request) {
	name := r.Get("path")
	if name.IsEmpty() || name.String() == "null" {
		res.Err(fmt.Errorf("filename prefix cannot be empty"), r)
	}
	node, err := sys.NodeInfo(r.Context(), r.URL.Path)
	if err != nil {
		res.Err(err, r)
	}
	if node.FilePath == "" {
		res.Err(fmt.Errorf("node file path is empty"), r)
	}
	_ = r.Response.WriteTpl(node.FilePath, g.Map{
		"node": node,
		"path": r.URL.Path,
	})
}
func (s cSys) GetCaptcha(r *ghttp.Request) {
	var driver = sys.NewDriver().ConvertFonts()
	c := captcha.NewCaptcha(driver, sys.Store)
	_, content, answer := c.Driver.GenerateIdQuestionAnswer()
	id := r.GetQuery("id").String()
	item, _ := c.Driver.DrawCaptcha(content)
	c.Store.Set(id, answer)
	res.OkData(item.EncodeB64string(), r)
}
func (s cSys) Quotations(r *ghttp.Request) {
	node, err := sys.NodeInfo(r.Context(), "/to/quotations")
	if err != nil {
		res.Err(err, r)
	}
	if err = r.Response.WriteTpl("/sys/tool/quotations.html", g.Map{"node": node}); err != nil {
		res.Err(err, r)
	}
}

func (s cSys) DocumentIndex(r *ghttp.Request) {
	res.Tpl("/sys/tool/document.html", nil, r)
}

// --adminMessage ---------------------------------------------------------------------
type cAdminMessage struct{ bo.Search }

var AdminMessage = &cAdminMessage{Search: bo.Search{
	T1: "s_admin_message", T2: "s_admin t2 on t2.id=t1.from_uid", T3: "s_admin t3 on t3.id=t1.to_uid", OrderBy: "t1.id desc", SearchFields: "t1.*,t2.uname from_uname,t3.uname to_uname",
	Fields: []bo.Field{
		{Name: "t2.from_uname", Type: 2, QueryName: "adminMessage_from_uname"}, {Name: "t3.uname", Type: 2, QueryName: "adminMessage_to_uname"}, {Name: "group", Type: 1, QueryName: "adminMessage_group"}, {Name: "type", Type: 1, QueryName: "adminMessage_type"}, {Name: "content", Type: 2, QueryName: "adminMessage_content"}, {Name: "link", Type: 2, QueryName: "adminMessage_link"},
	},
}}

func (c cAdminMessage) Path(r *ghttp.Request) {
	node, err := sys.NodeInfo(r.Context(), r.URL.Path)
	if err != nil {
		res.Err(err, r)
	}
	c.Page, c.Size = res.GetPage(r)
	total, data, err := sys.List(r.Context(), c.Search)
	if err != nil {
		res.Err(err, r)
	}
	adminOptions, err := sys.GetAllAdminOptions(r.Context())
	if err != nil {
		res.Err(err, r)
	}
	if err = r.Response.WriteTpl("/sys/adminMessage/index.html", g.Map{
		"list":         data,
		"page":         r.GetPage(total, c.Size).GetContent(3),
		"node":         node,
		"msg":          sys.MsgFromSession(r),
		"adminOptions": adminOptions.String(),
		"path":         r.URL.Path,
	}); err != nil {
		res.Err(err, r)
	}
}
func (c cAdminMessage) PathAdd(r *ghttp.Request) {
	r.Response.WriteTpl("/sys/adminMessage/add.html", g.Map{"msg": sys.MsgFromSession(r)})
}
func (c cAdminMessage) Post(r *ghttp.Request) {
	d := entity.AdminMessage{}
	if err := r.Parse(&d); err != nil {
		res.Err(err, r)
	}
	admin, err := sys.GetAdmin(r)
	if err != nil {
		res.Err(err, r)
	}
	d.FromUid = admin.Admin.Id
	d.Status = 1
	msg := fmt.Sprintf(consts.MsgPrimary, "发送成功")
	if err := sys.Add(r.Context(), c.T1, &d); err != nil {
		msg = fmt.Sprintf(consts.MsgWarning, err.Error())
	}
	r.Session.Set("msg", msg)
	d.Content = ""
	_ = r.Session.Set("adminMessage_edit", d)
	if err = sys.NoticeAdmin(r.Context(), "{'msg':'hello'}", d.ToUid); err != nil {
		res.Err(err, r)
	}
	if err = sys.AddAdminUnReadMsg(r.Context(), d.ToUid); err != nil {
		res.Err(err, r)
	}
	r.Response.RedirectTo(fmt.Sprint("/admin/adminMessage/path?", xurl.ToUrlParams(r.GetQueryMap())))
}
func (c cAdminMessage) Del(r *ghttp.Request) {
	id := r.Get("id")
	msg := fmt.Sprintf(consts.MsgPrimary, "删除成功")
	if err := sys.Del(r.Context(), c.T1, id); err != nil {
		msg = fmt.Sprintf(consts.MsgWarning, err.Error())
	}
	_ = r.Session.Set("msg", msg)
	r.Response.RedirectTo(fmt.Sprint("/admin/adminMessage/path?", xurl.ToUrlParams(r.GetQueryMap())))
}
func (c cAdminMessage) PathEdit(r *ghttp.Request) {
	data, err := sys.GetById(r.Context(), c.Search.T1, xparam.ID(r))
	if err != nil {
		res.Err(err, r)
	}
	_ = r.Session.Set("adminMessage_edit", data.Map())
	_ = r.Response.WriteTpl("/sys/adminMessage/edit.html", g.Map{"msg": sys.MsgFromSession(r)})
}
func (c cAdminMessage) Put(r *ghttp.Request) {
	d := entity.AdminMessage{}
	if err := r.Parse(&d); err != nil {
		res.Err(err, r)
	}
	m := gconv.Map(d)
	delete(m, "createdAt")
	msg := fmt.Sprintf(consts.MsgPrimary, "修改成功")
	if err := sys.Update(r.Context(), c.T1, d.Id, m); err != nil {
		msg = fmt.Sprintf(consts.MsgWarning, err.Error())
	}
	_ = r.Session.Set("msg", msg)
	r.Response.RedirectTo(fmt.Sprint("/admin/adminMessage/path/edit/", d.Id, "?", xurl.ToUrlParams(r.GetQueryMap())))
}
func (c cAdminMessage) UnreadMsgCount(r *ghttp.Request) {
	count, err := sys.GetAdminUnreadMsgCount(r.Context())
	if err != nil {
		res.Err(err, r)
	}
	res.OkData(count, r)
}
func (c cAdminMessage) ClearUnreadMsg(r *ghttp.Request) {
	err := sys.ClearUnreadMsg(r.Context())
	if err != nil {
		res.Err(err, r)
	}
	res.Ok(r)
}
func (c cAdminMessage) Clear(r *ghttp.Request) {
	if err := sys.ClearAdminMessage(r.Context(), r.Get("group").String()); err != nil {
		res.Err(err, r)
	}
	res.Ok(r)
}

// --Node ---------------------------------------------------------------------
type cNode struct{ bo.Search }

var Node = &cNode{Search: bo.Search{
	T1: "f_node", T2: "s_admin t2 on t1.uid= t2.id", OrderBy: "t1.year desc,t1.month desc,t1.day desc,t1.id desc", SearchFields: "t1.*,t2.uname",
	Fields: []bo.Field{
		{Name: "t1.year", Type: 1, QueryName: "node_year"},
		{Name: "t1.month", Type: 1, QueryName: "node_month"},
		{Name: "t1.day", Type: 1, QueryName: "node_day"},
		{Name: "t1.category", Type: 1, QueryName: "node_category"},
		{Name: "t1.summary", Type: 2, QueryName: "node_summary"},
		{Name: "level", Type: 1, QueryName: "node_level"}, {Name: "tag", Type: 2, QueryName: "node_tag"}, {Name: "main_things", Type: 2, QueryName: "node_main_things"},
	},
}}

func (c cNode) Path(r *ghttp.Request) {
	node, err := sys.NodeInfo(r.Context(), r.URL.Path)
	if err != nil {
		res.Err(err, r)
	}
	c.Page, c.Size = res.GetPage(r)
	total, data, err := sys.List(r.Context(), c.Search)
	if err != nil {
		res.Err(err, r)
	}
	if err = r.Response.WriteTpl("/f/node/index.html", g.Map{
		"list":     data,
		"page":     r.GetPage(total, c.Size).GetContent(3),
		"node":     node,
		"msg":      sys.MsgFromSession(r),
		"category": getCategory(r),
		"path":     r.URL.Path,
	}); err != nil {
		res.Err(err, r)
	}
}

func (c cNode) PathAdd(r *ghttp.Request) {
	r.Response.WriteTpl("/f/node/add.html", g.Map{
		"msg":      sys.MsgFromSession(r),
		"category": getCategory(r),
	})
}
func (c cNode) Post(r *ghttp.Request) {
	data := entity.Node{}
	if err := r.Parse(&data); err != nil {
		res.Err(err, r)
	}
	y := fmt.Sprint(gtime.Now().Year())
	m := gtime.Now().Month()
	d := time.Now().Day()
	happenDate := r.Get("happen_date").String()
	if happenDate != "" {
		split := strings.Split(happenDate, ",")
		switch len(split) {
		case 1:
			y = gconv.String(split[0])
		case 2:
			y = gconv.String(split[0])
			m = gconv.Int(split[1])
		case 3:
			y = gconv.String(split[0])
			m = gconv.Int(split[1])
			d = gconv.Int(split[2])
		}
	}
	data.Year = y
	data.Month = m
	data.Day = d
	admin, _ := sys.GetAdmin(r)
	data.Uid = admin.Admin.Id
	msg := fmt.Sprintf(consts.MsgPrimary, "添加成功")
	id, err := sys.AddGetID(r.Context(), c.T1, &data)
	if err != nil {
		msg = fmt.Sprintf(consts.MsgWarning, err.Error())
	}
	r.Session.Set("msg", msg)
	r.Response.RedirectTo(fmt.Sprint("/admin/node/path/edit/", id, "?", xurl.ToUrlParams(r.GetQueryMap())))
}
func (c cNode) Del(r *ghttp.Request) {
	id := r.Get("id")
	msg := fmt.Sprintf(consts.MsgPrimary, "删除成功")
	if err := sys.Del(r.Context(), c.T1, id); err != nil {
		msg = fmt.Sprintf(consts.MsgWarning, err.Error())
	}
	_ = r.Session.Set("msg", msg)
	r.Response.RedirectTo(fmt.Sprint("/admin/node/path?", xurl.ToUrlParams(r.GetQueryMap())))
}
func (c cNode) PathEdit(r *ghttp.Request) {
	data, err := sys.GetById(r.Context(), c.Search.T1, xparam.ID(r))
	if err != nil {
		res.Err(err, r)
	}
	_ = r.Session.Set("node_edit", data.Map())
	_ = r.Response.WriteTpl("/f/node/edit.html", g.Map{
		"msg":      sys.MsgFromSession(r),
		"category": getCategory(r),
	})
}
func (c cNode) Put(r *ghttp.Request) {
	d := entity.Node{}
	if err := r.Parse(&d); err != nil {
		res.Err(err, r)
	}
	m := gconv.Map(d)
	delete(m, "createdAt")
	msg := fmt.Sprintf(consts.MsgPrimary, "修改成功")
	if err := sys.Update(r.Context(), c.T1, d.Id, m); err != nil {
		msg = fmt.Sprintf(consts.MsgWarning, err.Error())
	}
	_ = r.Session.Set("msg", msg)
	r.Response.RedirectTo(fmt.Sprint("/admin/node/path/edit/", d.Id, "?", xurl.ToUrlParams(r.GetQueryMap())))
}
func getCategory(r *ghttp.Request) []g.Map {
	key, err := sys.DictGetByKey(r.Context(), "node-category")
	if err != nil {
		res.Err(err, r)
	}
	category := make([]g.Map, 0)
	for _, i := range strings.Split(key, "\n") {
		temp := strings.Split(i, ".")
		category = append(category, map[string]interface{}{
			"value": strings.TrimSpace(temp[0]),
			"label": strings.TrimSpace(temp[1]),
		})
	}
	return category
}

// --- Ws ------------------------------------------------------------------------

type ws struct{}

var Ws = &ws{}

func (w ws) GetUserWs(r *ghttp.Request) {
	sys.GetUserWs(r)
}
func (w ws) GetAdminWs(r *ghttp.Request) {
	sys.GetAdminWs(r)
}
func (w ws) NoticeUser(r *ghttp.Request) {
	var d struct {
		Uid     int `v:"required"`
		OrderId int `v:"required"`
	}
	err := r.Parse(&d)
	if err != nil {
		res.Err(err, r)
	}
	err = sys.NoticeUser(gctx.New(), d.Uid, d)
	if err != nil {
		res.Err(err, r)
	}
	res.Ok(r)
}
func (w ws) NoticeAdmin(r *ghttp.Request) {
	var d struct {
		Msg string `v:"required" json:"msg"`
	}
	err := r.Parse(&d)
	if err != nil {
		res.Err(err, r)
	}
	err = sys.NoticeAllAdmin(r.Context(), d)
	if err != nil {
		res.Err(err, r)
	}
	res.Ok(r)
}
