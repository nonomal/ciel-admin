// =================================================================================
// This is auto-generated by Freekey Admin at 2022-09-01 22:24:18. For more information see https://github.com/1211ciel/ciel-admin
// =================================================================================

package controller

import (
	"ciel-admin/internal/consts"
	"ciel-admin/internal/model/bo"
	"ciel-admin/internal/model/entity"
	"ciel-admin/internal/service/admin"
	"ciel-admin/internal/service/sys"
	"ciel-admin/internal/service/user"
	"ciel-admin/utility/utils/res"
	"ciel-admin/utility/utils/xparam"
	"ciel-admin/utility/utils/xurl"
	"ciel-admin/utility/utils/xuser"
	"fmt"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/net/ghttp"
	"github.com/gogf/gf/v2/util/gconv"
)

type cUser struct{ cBase }

var User = cUser{cBase{"u_user", "/admin/user", "/user/user"}}

// RegisterWebApi 注册Api服务
func (c cUser) RegisterWebApi(s *ghttp.RouterGroup) {
	s.Group("/user", func(g *ghttp.RouterGroup) {
		g.POST("/register", c.Register)
		g.POST("/login", c.Login)
		g.GET("/icons", c.Icons)
		g.Middleware(user.AuthMiddleware)
		g.PUT("/updatePass", c.UpdatePassByUser)   // 用户修改密码
		g.PUT("/updateNickname", c.UpdateNickname) //  修改昵称
		g.PUT("/updateIcon", c.UpdateIcon)         // 修改头像
	})
}

func (c cUser) RegisterRouter(s *ghttp.RouterGroup) {
	s.Group("/user", func(g *ghttp.RouterGroup) {
		g.Middleware(admin.AuthMiddleware)
		g.GET("/", c.Index)
		g.GET("/add", c.AddIndex)
		g.GET("/edit/:id", c.EditIndex)
		g.Middleware(admin.LockMiddleware, admin.ActionMiddleware)
		g.GET("/del/:id", c.Del)
		g.POST("/post", c.Post)
		g.POST("/put", c.Put)
		g.PUT("/updateUname", c.UpdateUname)
		g.PUT("/updatePass", c.UpdatePassByAdmin)
	})
}

func (c cUser) Index(r *ghttp.Request) {
	var (
		ctx     = r.Context()
		reqPath = r.URL.Path
		file    = fmt.Sprintf("%s/index.html", c.FileDir)
		msg     = sys.MsgFromSession(r)
		s       = bo.Search{T1: c.Table, OrderBy: "t1.id desc", Fields: []bo.Field{
			{Name: "id", Type: 1},
			{Name: "uname", Type: 2},
			{Name: "status", Type: 1},
			{Name: "desc", Type: 2},
			{Name: "join_ip", Type: 2},
		}}
	)
	node, err := sys.NodeInfo(ctx, reqPath)
	if err != nil {
		res.Err(err, r)
	}
	s.Page, s.Size = res.GetPage(r)
	total, data, err := sys.List(ctx, s)
	if err != nil {
		res.Err(err, r)
	}
	// 返回页面
	res.Tpl(file, g.Map{
		"node": node,
		"list": data,
		"page": r.GetPage(total, s.Size).GetContent(3),
		"path": reqPath, // 用于确定导航菜单
		"msg":  msg,
	}, r)
}
func (c cUser) AddIndex(r *ghttp.Request) {
	res.Tpl(fmt.Sprint(c.FileDir, "/add.html"), g.Map{"msg": sys.MsgFromSession(r)}, r)
}
func (c cUser) EditIndex(r *ghttp.Request) {
	var (
		table = c.Table
		id    = xparam.ID(r)
		d     = g.Map{"msg": sys.MsgFromSession(r)}
		f     = fmt.Sprint(c.FileDir, "/edit.html")
	)
	data, err := sys.GetById(r.Context(), table, id)
	if err != nil {
		res.Err(err, r)
	}
	for k, v := range data.Map() {
		r.SetForm(k, v)
	}
	res.Tpl(f, d, r)
}
func (c cUser) Post(r *ghttp.Request) {
	var (
		d = entity.User{}
	)
	if err := r.Parse(&d); err != nil {
		res.Err(err, r)
	}
	res.OkSession("添加成功", r)
	if err := sys.Add(r.Context(), c.Table, &d); err != nil {
		res.ErrSession(err, r)
	}
	path := fmt.Sprint(c.ReqPath, "/add?", xurl.ToUrlParams(r.GetQueryMap()))
	res.RedirectTo(path, r)
}
func (c cUser) Del(r *ghttp.Request) {
	var (
		table = c.Table
		id    = r.Get("id")
	)
	res.OkSession("删除成功", r)
	if err := sys.Del(r.Context(), table, id); err != nil {
		res.ErrSession(err, r)
	}
	path := fmt.Sprint(c.ReqPath, "?", xurl.ToUrlParams(r.GetQueryMap()))
	res.RedirectTo(path, r)
}
func (c cUser) Put(r *ghttp.Request) {
	var (
		d     = entity.User{}
		table = c.Table
	)
	if err := r.Parse(&d); err != nil {
		res.Err(err, r)
	}
	m := gconv.Map(d)
	delete(m, "createdAt")
	delete(m, "pass")
	res.OkSession("修改成功", r)
	if err := sys.Update(r.Context(), table, d.Id, m); err != nil {
		res.ErrSession(err, r)
	}
	path := fmt.Sprint(c.ReqPath, "/edit/", d.Id, "?", xurl.ToUrlParams(r.GetQueryMap()))
	res.RedirectTo(path, r)
}

func (c cUser) UpdateUname(r *ghttp.Request) {
	var (
		ctx = r.Context()
		d   struct {
			Uname string `v:"required"`
			Id    uint64 `v:"required"`
		}
	)
	if err := r.Parse(&d); err != nil {
		res.Err(err, r)
	}
	if err := user.UpdateUname(ctx, d.Uname, d.Id); err != nil {
		res.Err(err, r)
	}
	res.Ok(r)
}

func (c cUser) UpdatePassByAdmin(r *ghttp.Request) {
	var (
		ctx  = r.Context()
		pass = r.GetForm("pass").String()
		id   = r.GetForm("id").Uint64()
	)
	if err := user.UpdatePassByAdmin(ctx, pass, id); err != nil {
		res.Err(err, r)
	}
	res.Ok(r)
}

func (c cUser) Register(r *ghttp.Request) {
	var (
		d struct {
			Uname string `v:"required|passport#用户名不能为空|用户名格式不正确"`
			Pass  string `v:"required|password#密码不能为空|密码格式不正确"`
		}
		ctx = r.Context()
		ip  = r.GetClientIp()
	)
	if err := r.Parse(&d); err != nil {
		res.Err(err, r)
	}
	vo, err := user.Register(ctx, d.Uname, d.Pass, ip)
	if err != nil {
		res.Err(err, r)
	}
	res.OkData(vo, r)
}

func (c cUser) Login(r *ghttp.Request) {
	var (
		d struct {
			Uname string `v:"required|passport#用户名不能为空|用户名格式不正确"`
			Pass  string `v:"required|password#密码不能为空|密码格式不正确"`
		}
		ctx = r.Context()
		ip  = r.GetClientIp()
	)
	if err := r.Parse(&d); err != nil {
		res.Err(err, r)
	}
	vo, err := user.Login(ctx, d.Uname, d.Pass, ip)
	if err != nil {
		res.Err(err, r)
	}
	res.OkData(vo, r)
}

func (c cUser) UpdatePassByUser(r *ghttp.Request) {
	var (
		d struct {
			OldPass string `v:"required|password#旧密码不能为空|密码格式不正确"`
			NewPass string `v:"required|password#新密码不能为空|密码格式不正确"`
		}
		ctx = r.Context()
		uid = xuser.Uid(r)
	)
	if err := r.Parse(&d); err != nil {
		res.Err(err, r)
	}
	if err := user.UpdatePassByUser(ctx, d.OldPass, d.NewPass, uid); err != nil {
		res.Err(err, r)
	}
	res.Ok(r)
}

func (c cUser) UpdateNickname(r *ghttp.Request) {
	var (
		ctx      = r.Context()
		nickname = r.GetForm("nickname").String()
		uid      = xuser.Uid(r)
	)
	if nickname == "" {
		res.Err(consts.ErrNicknameEmpty, r)
	}
	if err := user.UpdateNickname(ctx, nickname, uid); err != nil {
		res.Err(err, r)
	}
	res.Ok(r)
}

func (c cUser) Icons(r *ghttp.Request) {
	var (
		ctx = r.Context()
	)
	icons := user.Icons(ctx)
	res.OkData(icons, r)
}

func (c cUser) UpdateIcon(r *ghttp.Request) {
	var (
		ctx  = r.Context()
		icon = r.GetForm("icon").String()
		uid  = xuser.Uid(r)
	)
	if icon == "" {
		res.Err(consts.ErrIconEmpty, r)
	}
	if err := user.UpdateIcon(ctx, icon, uid); err != nil {
		res.Err(err, r)
	}
	res.Ok(r)
}
