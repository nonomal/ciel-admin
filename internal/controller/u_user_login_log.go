// =================================================================================
// This is auto-generated by Freekey Admin at 2022-09-03 14:50:22. For more information see https://github.com/1211ciel/ciel-admin
// =================================================================================

package controller

import (
	"ciel-admin/internal/model/bo"
	"ciel-admin/internal/service/admin"
	"ciel-admin/internal/service/sys"
	"ciel-admin/internal/service/user"
	"ciel-admin/utility/utils/res"
	"ciel-admin/utility/utils/xurl"
	"fmt"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/net/ghttp"
)

type cUserLoginLog struct{ cBase }

var UserLoginLog = cUserLoginLog{cBase{"u_user_login_log", "/admin/userLoginLog", "/user/userLoginLog"}}

func (c cUserLoginLog) Index(r *ghttp.Request) {
	var (
		ctx     = r.Context()
		reqPath = r.URL.Path
		file    = fmt.Sprintf("%s/index.html", c.FileDir)
		msg     = sys.MsgFromSession(r)
		s       = bo.Search{
			T1:           c.Table,
			T2:           "u_user t2 on t1.uid = t2.id",
			SearchFields: "t1.*,t2.uname uname",
			OrderBy:      "t1.id desc", Fields: []bo.Field{
				{Name: "id", Type: 1},
				{Name: "ip", Type: 2},
				{Name: "t2.uname", QueryName: "uname", Type: 1},
			}}
	)
	node, err := sys.NodeInfo(ctx, reqPath)
	if err != nil {
		res.Err(err, r)
	}
	s.Page, s.Size = res.GetPage(r)
	total, data, err := sys.List(ctx, s)
	if err != nil {
		res.Err(err, r)
	}
	// 返回页面
	res.Tpl(file, g.Map{
		"node": node,
		"list": data,
		"page": r.GetPage(total, s.Size).GetContent(3),
		"path": reqPath, // 用于确定导航菜单
		"msg":  msg,
	}, r)
}
func (c cUserLoginLog) Del(r *ghttp.Request) {
	var (
		id    = r.Get("id")
		table = c.Table
	)
	res.OkSession("删除成功", r)
	if err := sys.Del(r.Context(), table, id); err != nil {
		res.ErrSession(err, r)
	}
	path := fmt.Sprint(c.ReqPath, "?", xurl.ToUrlParams(r.GetQueryMap()))
	res.RedirectTo(path, r)
}
func (c cUserLoginLog) RegisterRouter(g *ghttp.RouterGroup) {
	g.Group("/userLoginLog", func(g *ghttp.RouterGroup) {
		g.Middleware(admin.AuthMiddleware)
		g.GET("/", c.Index) // 主页面
		g.Middleware(admin.LockMiddleware, admin.ActionMiddleware)
		g.GET("/del/:id", c.Del) // 删除请求
		g.GET("/clear", c.Clear)
	})
}

func (c cUserLoginLog) Clear(r *ghttp.Request) {
	var (
		ctx = r.Context()
	)
	res.OkSession("ok", r)
	if err := user.ClearLoginLog(ctx); err != nil {
		res.ErrSession(err, r)
	}
	res.RedirectTo("/admin/userLoginLog", r)
}
