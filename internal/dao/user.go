// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"ciel-admin/internal/consts"
	"ciel-admin/internal/dao/internal"
	"ciel-admin/internal/model/entity"
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// internalUserDao is internal type for wrapping internal DAO implements.
type internalUserDao = *internal.UserDao

// userDao is the data access object for table u_user.
// You can define custom methods on it to extend its functionality as you wish.
type userDao struct {
	internalUserDao
}

func (d userDao) GetByIdTx(ctx context.Context, tx *gdb.TX, id uint64) (*entity.User, error) {
	var data entity.User
	one, err := tx.Ctx(ctx).Model(d.Table()).WherePri(id).One()
	if err != nil {
		g.Log().Error(ctx, err)
		return nil, err
	}
	if one.IsEmpty() {
		return nil, consts.ErrDataNotFound
	}
	if err = one.Struct(&data); err != nil {
		g.Log().Error(ctx, err)
		return nil, err
	}
	return &data, nil
}

func (d userDao) GetByUname(ctx context.Context, uname string) (*entity.User, error) {
	var data entity.User
	one, err := d.Ctx(ctx).One("uname", uname)
	if err != nil {
		g.Log().Error(ctx, err)
		return nil, err
	}
	if one.IsEmpty() {
		return nil, consts.ErrLogin
	}
	if err = one.Struct(&data); err != nil {
		return nil, err
	}
	return &data, nil
}

func (d userDao) GetById(ctx context.Context, id uint64) (*entity.User, error) {
	var data entity.User
	one, err := d.Ctx(ctx).WherePri(id).One()
	if err != nil {
		return nil, err
	}
	if one.IsEmpty() {
		return nil, consts.ErrDataNotFound
	}
	if err = one.Struct(&data); err != nil {
		return nil, err
	}
	return &data, nil
}

var (
	// User is globally public accessible object for table u_user operations.
	User = userDao{
		internal.NewUserDao(),
	}
)

// Fill with you ideas below.
