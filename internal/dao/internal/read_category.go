// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// ReadCategoryDao is the data access object for table r_read_category.
type ReadCategoryDao struct {
	table   string              // table is the underlying table name of the DAO.
	group   string              // group is the database configuration group name of current DAO.
	columns ReadCategoryColumns // columns contains all the column names of Table for convenient usage.
}

// ReadCategoryColumns defines and stores column names for table r_read_category.
type ReadCategoryColumns struct {
	Id          string //
	Name        string //
	Desc        string //
	Speak       string //
	Icon        string //
	Poster      string //
	TotalNum    string // 文章数量
	Sort        string //
	SubCategory string //
	CreatedAt   string //
}

// readCategoryColumns holds the columns for table r_read_category.
var readCategoryColumns = ReadCategoryColumns{
	Id:          "id",
	Name:        "name",
	Desc:        "desc",
	Speak:       "speak",
	Icon:        "icon",
	Poster:      "poster",
	TotalNum:    "total_num",
	Sort:        "sort",
	SubCategory: "sub_category",
	CreatedAt:   "created_at",
}

// NewReadCategoryDao creates and returns a new DAO object for table data access.
func NewReadCategoryDao() *ReadCategoryDao {
	return &ReadCategoryDao{
		group:   "default",
		table:   "r_read_category",
		columns: readCategoryColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ReadCategoryDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *ReadCategoryDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *ReadCategoryDao) Columns() ReadCategoryColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *ReadCategoryDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ReadCategoryDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *ReadCategoryDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
