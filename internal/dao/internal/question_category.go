// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// QuestionCategoryDao is the data access object for table q_question_category.
type QuestionCategoryDao struct {
	table   string                  // table is the underlying table name of the DAO.
	group   string                  // group is the database configuration group name of current DAO.
	columns QuestionCategoryColumns // columns contains all the column names of Table for convenient usage.
}

// QuestionCategoryColumns defines and stores column names for table q_question_category.
type QuestionCategoryColumns struct {
	Id     string //
	Name   string //
	Icon   string //
	Desc   string //
	Sort   string //
	Num    string // article num
	Status string //
}

// questionCategoryColumns holds the columns for table q_question_category.
var questionCategoryColumns = QuestionCategoryColumns{
	Id:     "id",
	Name:   "name",
	Icon:   "icon",
	Desc:   "desc",
	Sort:   "sort",
	Num:    "num",
	Status: "status",
}

// NewQuestionCategoryDao creates and returns a new DAO object for table data access.
func NewQuestionCategoryDao() *QuestionCategoryDao {
	return &QuestionCategoryDao{
		group:   "default",
		table:   "q_question_category",
		columns: questionCategoryColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *QuestionCategoryDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *QuestionCategoryDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *QuestionCategoryDao) Columns() QuestionCategoryColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *QuestionCategoryDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *QuestionCategoryDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *QuestionCategoryDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
