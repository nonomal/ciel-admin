// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventDao is the data access object for table e_event.
type EventDao struct {
	table   string       // table is the underlying table name of the DAO.
	group   string       // group is the database configuration group name of current DAO.
	columns EventColumns // columns contains all the column names of Table for convenient usage.
}

// EventColumns defines and stores column names for table e_event.
type EventColumns struct {
	Id        string //
	Year      string //
	Month     string //
	Day       string //
	Category1 string //
	Category2 string //
	Tag       string //
	Event     string //
	Summery   string //
	Status    string //
	About     string //
	CreatedAt string //
}

// eventColumns holds the columns for table e_event.
var eventColumns = EventColumns{
	Id:        "id",
	Year:      "year",
	Month:     "month",
	Day:       "day",
	Category1: "category_1",
	Category2: "category_2",
	Tag:       "tag",
	Event:     "event",
	Summery:   "summery",
	Status:    "status",
	About:     "about",
	CreatedAt: "created_at",
}

// NewEventDao creates and returns a new DAO object for table data access.
func NewEventDao() *EventDao {
	return &EventDao{
		group:   "default",
		table:   "e_event",
		columns: eventColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventDao) Columns() EventColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
